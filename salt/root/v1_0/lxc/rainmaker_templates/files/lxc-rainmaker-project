#!/bin/bash

# Crash on any error
set -e

# Load LXC defaults
if [ -r /etc/default/lxc ]; then
    . /etc/default/lxc
fi

# Download the rootfs archive if not present in the download cache
download() {
	url=$1
	path=$2
    quiet=$3
    debug=$4
	mkdir -p `dirname $path`
	wget --progress=bar -O $path $url
}

# The install function installs the minimal operating system in the LXC
install() {
	profile_path=$1
    rootfs_dir=$2
    quiet=$3
    debug=$4
    if [ "$quiet" -ne 1 ]; then
        echo 'Deploying container root filesystem ...'
    fi
	tar -C $rootfs_dir -xzf $profile_path
    if [ "$quiet" -ne 1 ]; then
	    echo 'Deployed.'
    fi
}

# Set up the path option
options=$(getopt -o n:p: -l path:,name:,rootfs:,profile:,version:,downloadhost:,quiet,debug -- "$@")

if [ $? -ne 0 ]; then
    exit 1
fi

eval set -- "$options"

quiet=0
debug=0

lxc_cache_base="/var/cache/lxc/rainmaker/project"

profile_download_url=""
profile_download_server="http://image.rainmaker-dev.com"
if [ -n "$RMK_DOWNLOAD_HOST" ]; then
    profile_download_server="$RMK_DOWNLOAD_HOST"
fi

# Fetch command line parameters
while true; do
    case "$1" in
        -p|--path)      path=$2; shift 2;;
        -n|--name)      name=$2; shift 2;;
        --rootfs)       rootfs=$2; shift 2;;
        --profile)      profile=$2; shift 2;;
        --version)      version=$2; shift 2;;
        --downloadhost) profile_download_server=$2; shift 2;;
        --quiet)        quiet=1; shift 1;;
        --debug)        debug=1; shift 1;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ -z "$profile" ]; then
    profile="default"
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

# detect rootfs
config="$path/config"
# if $rootfs exists here, it was passed in with --rootfs
if [ -z "$rootfs" ]; then
    if grep -q '^lxc.rootfs' $config 2>/dev/null ; then
        rootfs=$(awk -F= '/^lxc.rootfs =/{ print $2 }' $config)
    else
        rootfs=$path/rootfs
    fi
fi

if [ "$quiet" -ne 1 ]; then
    echo "Name: $name"
    echo "Path: $path"
    echo "Profile: $profile"
fi

profile_download_base_url="$profile_download_server/rootfs/project/$profile"
profile_latest_url="$profile_download_server/rootfs/project/$profile/latest"

if [ "$debug" -eq 1 ]; then
    echo "Profile Download Base URL: $profile_download_base_url"
    echo "Profile Latest URL: $profile_latest_url"
fi

if [ -z "$version" ]; then
    version=`curl -s $profile_latest_url`
    if [ "$quiet" -ne 1 ]; then
        echo "No profile version was specified. Defaulting to latest version: $version"
    fi
fi

major=`echo $version | cut -d'.' -f1`
profile_download_url="$profile_download_base_url/$major/project-$profile-$version.tgz"
lxc_cache_path="$lxc_cache_base/$major/project-$profile-$version.tgz"

if [ "$debug" -eq 1 ]; then
    echo "Major: $major"
    echo "Profile Downlold URL: $profile_downlold_url"
    echo "LXC Cache Path: $lxc_cache_path"
fi

if [ ! -f "$lxc_cache_path" ]; then
    if [ "$quiet" -ne 1 ]; then
        echo 'A cached copied of the required version of the profile is not available so it will be downloaded.'
    fi
	download $profile_download_url $lxc_cache_path $quiet $debug
else
    if [ "$quiet" -ne 1 ]; then
        echo 'A cached copied of the required version of the profile is available, so no need to download it.'
    fi
fi

install $lxc_cache_path $rootfs $quiet $debug
